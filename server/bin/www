#!/usr/bin/env node

require('dotenv').config();
console.log(`NODE_ENV=${process.env.NODE_ENV}`);

const os = require('os');
console.log(`TEMP=${os.tmpdir()}`)

const config = require('../../config.js');

const app = require('../app');
const debug = require('debug')('livereload:server'); // eslint-disable-line no-unused-vars
const http = require('http');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	console.log('Listening on ' + bind);
}
/* --------------------------------------------------------------------------- */
// https://bytearcher.com/articles/refresh-changes-browser-express-livereload-nodemon/

if (process.env.NODE_ENV === 'development') {
	const path = require('path');
	const livereload = require('livereload');

	const liveReloadServer = livereload.createServer();

	liveReloadServer.server.once('connection', () => {
		setTimeout(() => {
			liveReloadServer.refresh('/');
		}, 100);
	});

	const watchPath = path.join(config.rootDir, config.public);
	liveReloadServer.watch(watchPath);

	console.log('Livereload enabled, watching', watchPath);
}
